CREATE OR REPLACE FUNCTION match_fct_micronutrients()
RETURNS void
LANGUAGE plpgsql
AS
$code$

declare

fct_id int;
fooditem_rec record;
mn_rec record;
consumption_rec record;
the_household_id int;
fct_list integer[];
fct_list_rec record;
have_found_fct_entry boolean;
            
BEGIN
	
	-- drop and recreate create intermediate table
	RAISE NOTICE 'Creating fct_list_food_compostion table...';

	DROP TABLE IF EXISTS fct_list_food_composition cascade; 
	
	CREATE TABLE fct_list_food_composition (
	    id 								integer primary key GENERATED BY DEFAULT AS identity,
	    fct_list 						text,
	    food_genus_id 					text,
	    micronutrient_id               	text,
	    micronutrient_composition      	numeric,
	    fooditem_column					text,
	    fct_used            			integer,
		CONSTRAINT fct_list_food_composition_uk1 UNIQUE (fct_list, food_genus_id, micronutrient_id) 
	);
	

	-- drop and recreate household_fct_list table 
	RAISE NOTICE 'Creating household_fct_list table...';
	
	DROP TABLE IF EXISTS household_fct_list;
	
	create table household_fct_list
	(
	household_id 	integer primary key references household (id),
	fct_list 		text
	)
	;
	
	-- populate household_fct_list table 
	RAISE NOTICE 'Populating household_fct_list table...';
	
	insert into household_fct_list
		(household_id, 
		fct_list)
	select 
		id, 
		ARRAY(SELECT * FROM get_fct_list(location))
	from household
	where id < 10; -- TODO -remove for all data

	-- create distinct_fct_list table
	RAISE NOTICE 'Creating distinct_fct_list table...';

	drop table if exists distinct_fct_list;

	create table distinct_fct_list as
	select 
		distinct h.fct_list 
	from
		household_fct_list h;
	

	-- populate intermediate table
	RAISE NOTICE 'Populating fct_list_food_compostion table...';
    for fct_list_rec in 
    	    	select 
				l.fct_list,
				f.food_genus_id,
				m.id as micronutrient_id,
				m.name as micronutrient,
				m.fooditem_column 
				from
				distinct_fct_list l
				cross join
					(select distinct food_genus_id from 
					fooditem
					where 
					food_genus_id is not null) f
				cross join
				micronutrient m 

	 loop
	 
	 	--RAISE NOTICE 'fct_list_rec: %', fct_list_rec;
	 
       	have_found_fct_entry := FALSE; 
      
	 	FOREACH fct_id IN ARRAY fct_list_rec.fct_list::int[] loop
	 	
	 			--RAISE NOTICE 'fct_id: %', fct_id;
        	
	        	execute 'select original_food_name, 
				''' || fct_list_rec.micronutrient || ''' as micronutrient,
				' || fct_list_rec.fooditem_column || ' as thevalue
	        	from fooditem
	        	where 
	        	fct_source_id = ' || fct_id || '
	        	and food_genus_id = ''' || fct_list_rec.food_genus_id || '''
				and ' || fct_list_rec.fooditem_column || ' is not null'
				into fooditem_rec;
	        	
				if fooditem_rec.micronutrient is not null THEN
                
                    --RAISE NOTICE 'fooditem_rec: %', fooditem_rec;
                
                    have_found_fct_entry := TRUE;

                    insert into fct_list_food_composition
                    (
                        fct_list,
    					food_genus_id,
                        micronutrient_id,
                        micronutrient_composition,
                        fct_used
                    )
                    values
                    (
                        fct_list_rec.fct_list,
                        fct_list_rec.food_genus_id,
                        fct_list_rec.micronutrient_id,
                        fooditem_rec.thevalue,
                        fct_id
                    );
                    
                    -- if we find one, we can exit
                    exit;

                end if;

            end loop;
            
            IF NOT have_found_fct_entry THEN
               
            	--RAISE NOTICE 'inserting null';
            
                insert into fct_list_food_composition
                (
                       fct_list,
    					food_genus_id,
                        micronutrient_id,
                        micronutrient_composition,
                        fct_used
                )
                values
                (
                   		fct_list_rec.fct_list,
                        fct_list_rec.food_genus_id,
                        fct_list_rec.micronutrient_id,
                        null,
                        null
                );
            END IF;
			
        	--end loop;
    
    end loop;
   
	
	    
	
	-- populate final results table
	RAISE NOTICE 'Populating final results table...';
	
	INSERT INTO consumption_composition_match
	(food_genus_id,
	household_id,
	household_member_id,
	fct_list,
	micronutrient_id,
	micronutrient_composition,
	fct_used)
	select 
	ci.food_genus_id,
	ci.household_id,
	ci.household_member_id,
	ci.fct_list,
	ccm.micronutrient_id,
	ccm.micronutrient_composition,
	ccm.fct_used
	from 
		(
		select 
	    		row_number() over () as rownum
	    		, consumption_items.*
	    	from 
	    	(
	    	SELECT
	             hc.food_genus_id
	             , h.id AS household_id
	             , null as household_member_id
	             , f.fct_list
	            FROM 
	            household_consumption hc
	            join household h
	            on hc.household_id = h.id
	            JOIN household_fct_list f
	            ON h.id = f.household_id
	            
	        union all
            
        	SELECT 
               hmc.food_genus_id
             , hmc.id AS household_id
  			 , hhm.id AS household_member_id
             , ff.fct_list
            FROM 
            household_member_consumption hmc
            join household_member hhm 
            on hhm.id = hmc.household_member_id 
            join household hh
            on hhm.household_id = hh.id
            JOIN household_fct_list ff
	        ON hh.id = ff.household_id
	         ) as consumption_items
	    ) ci
		join fct_list_food_composition ccm 
		on ci.fct_list = ccm.fct_list
		and ci.food_genus_id = ccm.food_genus_id;

RAISE NOTICE 'End.';
	
end;   


         
$code$
;

         
         
       